"""
Text adventure
"""
import random

WATER_TYPES = ["creek","river","lake","stream","waterfall"]
GROUND_TYPES = ["grassy","rocky","sandy"]
ATTRIBUTE_TYPES = ["trees","cliffs"]
LEVEL_TYPES = ["mountains","lowlands","highlands"]
v = "false"
objects = []

class Terrain_Object():
    """ Object class. """

    def __init__(self):
        self.x = None
        self.y = None
        self.water = None
        self.ground = None
        self.attribute = None
        self.level = None

    def setup(self, x, y):
        self.x = x
        self.y = y

        water_chance = random.randint(1, 100)
        self.water = random.choice(GROUND_TYPES)
        self.ground = random.choice(ATTRIBUTE_TYPES)
        self.attribute = random.choice(LEVEL_TYPES)
        if water_chance >= 40:
            self.water = random.choice(WATER_TYPES)

class Player():
    """ Player class. """

    def __init__(self):
        self.x = None
        self.y = None

    def setup(self, x, y):
        self.x = x
        self.y = y
    """ Main application class. """
	
class World():
	
	def __init__(self):
		self.player = None
        # TODO: fill world with objects
	
	def newTerrain(self):
		temp_list = []
		self.ground = random.choice(GROUND_TYPES)
		self.attribute = random.choice(ATTRIBUTE_TYPES)
		self.level = random.choice(LEVEL_TYPES)
		water_chance = random.randint(1, 100)
		if water_chance <= 40:
			self.water = random.choice(WATER_TYPES)
			temp_x = self.player.x
			temp_y = self.player.y
			temp_list.append(temp_x)
			temp_list.append(temp_y)
			temp_list.append(self.ground)
			temp_list.append(self.attribute)
			temp_list.append(self.level)
			temp_list.append(self.water)
			objects.append(temp_list)
		else:
			self.water = "none"
			temp_x = self.player.x
			temp_y = self.player.y
			temp_list.append(temp_x)
			temp_list.append(temp_y)
			temp_list.append(self.ground)
			temp_list.append(self.attribute)
			temp_list.append(self.level)
			temp_list.append(self.water)
			objects.append(temp_list)
			
	def knownTerrain(self):
		for object in objects:
			if self.player.x == object[0] and self.player.y == object[1]:
				v = "true"
				break
			else:
				v = "false"
			
		if object[5] != "none" and v == "true":
			print("true")
			print("found", object[0], object[1], object[2],object[3],object[4],object[5])
		elif v == "true":
			print("true")
			print("found", object[0], object[1], object[2],object[3],object[4])
		elif v == "false":
			print("false")
			print(object[5])
			print(object[0])
			print(object[1])
			self.newTerrain()
		
	def setup(self):
		self.player = Player()
		self.player.setup(0, 0)
		self.newTerrain()
		self.on_draw()
	
	def on_draw(self):
        #Render the screen.

        # teken speler
		print("")
		print("Player is: ", self.player.x, self.player.y)

        # teken objecten
            # teken object
		print("De ground is: ", objects)

	def on_update(self):
        # TODO: alle geldigde instructies in een lijst zetten
        # TODO: user input checken (geen cijfers etc.)
        # TODO: user input naar lower case?
		command = input("> ")
		if command == "forward":
			self.player.y += 1
			self.knownTerrain()
		elif command == "back":
			self.player.y -= 1
			self.knownTerrain()
		elif command == "left":
			self.player.x += 1
			self.knownTerrain()
		elif command == "right":
			self.player.x -= 1
			self.knownTerrain()
		elif command == "help":
			print("forward")
			print("back")
			print("left")
			print("right")
			print("help")
		else:
			print("not a valid input")
        # TODO: other instructions


        # TODO: check if terrain is undiscovered
            # if so, generate
        # new_object = Object()
        #new_object.setup(self.player.x, self.player.y)
        #self.objects.append(new_object)

def main():
	world = World()
	world.setup()
	while True:
		world.on_update()
		world.on_draw()


if __name__ == "__main__":
	main()
