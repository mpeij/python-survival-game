"""
Text adventure
"""
import random
import json
import os
import shutil
import sys
import keyboard
import time

try:
	with open("saves/saveNames.json") as file_in:
		print()
except:
	os.mkdir("saves")
	with open("saves/saveNames.json", 'w+') as output:
		json.dump("", output)
				

WATER_TYPES = ["creek","river","lake","stream","waterfall"]
GROUND_TYPES = ["grassy","rocky","sandy"]
ATTRIBUTE_TYPES = ["trees","cliffs"]
LEVEL_TYPES = ["mountains","lowlands","highlands"]
objects = []
importX = ""
importY = ""
Print = ""

def menuOptions(currentOption, option1, option2, option3, menuName):

	os.system("cls")
	textPrint()
	print()
	print(menuName)
	if currentOption == 1:
		print(option1 + " <")
		print(option2)
		print(option3)
	elif currentOption == 2:
		print(option1)
		print(option2 + " <")
		print(option3)
	elif currentOption == 3:
		print(option1)
		print(option2)
		print(option3 + " <")
		
def menu(direction, option1, option2, option3, menuName):

	if direction == "down":
		if world.selOption == 1:
			world.selOption = 2
		elif world.selOption == 2:
			world.selOption = 3
		elif world.selOption == 3:
			world.selOption = 1
		menuOptions(world.selOption, option1, option2, option3, menuName)
		time.sleep(0.2)
	elif direction == "up":
		if world.selOption == 1:
			world.selOption = 3
		elif world.selOption == 2:
			world.selOption = 1
		elif world.selOption == 3:
			world.selOption = 2
		menuOptions(world.selOption, option1, option2, option3, menuName)
		time.sleep(0.2)

def textPrint():
	print ("  _____         _    ____            __ _   ")
	print (" |_   _|____  _| |_ / ___|_ __ __ _ / _| |_ ")
	print ("   | |/ _ \ \\/ / __| |   | '__/ _` | |_| __|")
	print ("   | |  __/>  <| |_| |___| | | (_| |  _| |_ ") 
	print ("   |_|\\___/_/\\_\\\__|\\____|_|  \\__,_|_|  \\__|")

class loadGame():
	def content(self):
		world.loadTries += 1
		if world.loadTries == 1:
			pass
		else:
			print("save name:")
		loadFile = input("")
		if loadFile == exit:
			pass
		else:
			try:
				with open("saves/" + loadFile + "/world.json") as file_in:
					temp_objectsVar = json.load(file_in)
					for object in temp_objectsVar:
						objects.append(object)
	
				with open("saves/" + loadFile + "/player/playerX.json") as file_in:
					self.importX = json.load(file_in)
			
				with open("saves/" + loadFile + "/player/playerY.json") as file_in:
					self.importY = json.load(file_in)
				
				with open("saves/" + loadFile + "/player/inventory.json") as file_in:
					self.inventory = json.load(file_in)
			
				with open("saves/" + loadFile + "/settings/water.json") as file_in:
					world.settingWaterChance = json.load(file_in)
			
				with open("saves/" + loadFile + "/settings/inventory.json") as file_in:
					world.invMax = json.load(file_in)
			
				self.loaded = "true"
				os.system("cls")
				print("loading game...")
			except:
				if world.loadTries == 1:
					pass
				else:
					print("save does not exist")
				self.loaded = "false"
class Player():
    """ Player class. """

    def __init__(self):
        self.x = None
        self.y = None

    def setup(self, x, y):
        self.x = x
        self.y = y
    """ Main application class. """
	
class World():
	rockOption = "false"
	menuReturn = "false"
	def startup(self):
		command = ""
		self.invMax = 8
		self.settingWaterChance = 40
		os.system("cls")
		textPrint()
		print()
		print()
		print("new  <")
		print("load")
		print("exit")
		self.selOption = 1
		self.load = loadGame()
		self.loadTries = 0
		while True:
			if keyboard.is_pressed("down"):
		
				menu("down", "new ", "load", "exit", "")
			
			elif keyboard.is_pressed("up"):
			
				menu("up", "new ", "load", "exit", "")
			
			elif keyboard.is_pressed("enter"):
				
				if self.selOption == 1:
					print()
					self.load.loaded = "false"
					break
				elif selOption == 2:
					self.self.load.content()
					if self.load.loaded == "true":
						break
					else:
						self.load.loaded = "false"
				elif self.selOption == 3:
					sys.exit()
		
			else:
				pass
			
	def delete(self):
		print()
		print("save name:")
		save_name = input("> ")
		if save_name == "":
			print("you must enter a save name")
		else:
			temp_saveLocation = "saves/" + save_name
			try:
				shutil.rmtree(temp_saveLocation)
				
				with open("saves/saveNames.json", "r") as file_in:
					saveList = []
					saveVar = json.load(file_in)
					saveList.append(saveVar)
					saveList = saveList[0]
					saveList.remove(save_name)
					
					with open("saves/saveNames.json", "w+") as output:
						json.dump(saveList, output)
				
				with open("saves/saveNames.json", "r") as file_in:
					saveVar = json.load(file_in)
				if saveVar == []:
					with open("saves/saveNames.json", "w+") as output:
						json.dump("", output)
						
				print("delete completed")
				
			except:
				print("save doesnt exist")
		
	def save(self):
		print("save name:")
		save_name = input("> ")
		if save_name == "":
			print("you must enter a save name")
		else:
		
			with open("saves/saveNames.json", "r") as file_in:
				saveList = json.load(file_in)
			
			if saveList == "":
					
				v = "true"
				
				temp_saveLocation = "saves/" + save_name
				
				os.mkdir(temp_saveLocation)
				os.mkdir(temp_saveLocation + "/settings")
				
				temp_saveFile = temp_saveLocation + "/world.json"
			
				with open(temp_saveFile, 'w+') as output:
					json.dump(objects, output)
					
				os.mkdir("saves/" + save_name + "/player")
				
				temp_saveFile = temp_saveLocation + "/player/inventory.json"
				with open(temp_saveFile, "w+") as output:
					json.dump(self.load.inventory, output)
					
				temp_saveFile = temp_saveLocation + "/player/playerX.json"
					
				with open(temp_saveFile, "w+") as output:
					json.dump(self.player.x, output)
				
				temp_saveFile = temp_saveLocation + "/player/playerY.json"
					
				with open(temp_saveFile, "w+") as output:
					json.dump(self.player.y, output)
					
				temp_saveFile = temp_saveLocation + "/settings/water.json"
					
				with open(temp_saveFile, "w+") as output:
					json.dump(self.settingWaterChance, output)
					
				temp_saveFile = temp_saveLocation + "/settings/inventory.json"
					
				with open(temp_saveFile, "w+") as output:
					json.dump(self.invMax, output)
				
				saveList = []
				saveList.append(save_name)
				
				with open("saves/saveNames.json", "w+") as output:
					json.dump(saveList, output)
				
				print()
				print("save complete")
			
			else:
		
				for object in saveList:
					if object == save_name:
						v = "true"
						print()
						print("save already exists")
						print("overwrite?")
						while True:
							overwrite = input("(y/n)> ")
							if overwrite == "y":
								
								temp_saveLocation = "saves/" + save_name
								temp_saveFile = temp_saveLocation + "/world.json"
								
								shutil.rmtree(temp_saveLocation)
								
								while True:
									try:
										os.mkdir(temp_saveLocation)
										os.mkdir(temp_saveLocation + "/settings")
										break
									except:
										v = "true"
										
								with open(temp_saveFile, 'w+') as output:
									json.dump(objects, output)
					
								os.mkdir("saves/" + save_name + "/player")
					
								temp_saveFile = temp_saveLocation + "/player/playerX.json"
					
								with open(temp_saveFile, "w+") as output:
									json.dump(self.player.x, output)
								
								temp_saveFile = temp_saveLocation + "/player/inventory.json"
								with open(temp_saveFile, "w+") as output:
									json.dump(self.load.inventory, output)
								
								temp_saveFile = temp_saveLocation + "/player/playerY.json"
					
								with open(temp_saveFile, "w+") as output:
									json.dump(self.player.y, output)
									
								temp_saveFile = temp_saveLocation + "/settings/water.json"
					
								with open(temp_saveFile, "w+") as output:
									json.dump(self.settingWaterChance, output)
					
								temp_saveFile = temp_saveLocation + "/settings/inventory.json"
					
								with open(temp_saveFile, "w+") as output:
									json.dump(self.invMax, output)
								
								print()
								print("save overwritten")
								break
								
							elif overwrite == "n":
								print()
								print("save cancelled")
								break
							else:
								print("please enter y or n")
				
					else:	
						v = "false"
			
				if v == "false":
					temp_saveLocation = "saves/" + save_name
				
					os.mkdir(temp_saveLocation)
					os.mkdir(temp_saveLocation + "/settings")
					temp_saveFile = temp_saveLocation + "/world.json"
			
					with open(temp_saveFile, 'w+') as output:
						json.dump(objects, output)
					
					os.mkdir("saves/" + save_name + "/player")
					
					temp_saveFile = temp_saveLocation + "/player/playerX.json"
					
					with open(temp_saveFile, "w+") as output:
						json.dump(self.player.x, output)
					
					temp_saveFile = temp_saveLocation + "/player/inventory.json"
					
					with open(temp_saveFile, "w+") as output:
						json.dump(self.load.inventory, output)
					
					temp_saveFile = temp_saveLocation + "/player/playerY.json"
					
					with open(temp_saveFile, "w+") as output:
						json.dump(self.player.y, output)
						
					temp_saveFile = temp_saveLocation + "/settings/water.json"
					
					with open(temp_saveFile, "w+") as output:
						json.dump(self.settingWaterChance, output)
					
					temp_saveFile = temp_saveLocation + "/settings/inventory.json"
						
					with open(temp_saveFile, "w+") as output:
						json.dump(self.invMax, output)
				
					with open("saves/saveNames.json", "r") as file_in:
						saveList = []
						saveVar = json.load(file_in)
						saveList.append(saveVar)
						saveList = saveList[0]
						saveList.append(save_name)
				
					with open("saves/saveNames.json", "w+") as output:
						json.dump(saveList, output)
						
					print("save complete")
	
	def settings(self):
		time.sleep(0.5)
		os.system("cls")
		textPrint()
		print()
		print("- game settings:")
		print("inventory <")
		print("water")
		print("done")
		self.selOption = 1
		while True:
			if keyboard.is_pressed("down"):
		
				menu("down", "inventory", "water    ", "done     ", "- game settings:")
				
			elif keyboard.is_pressed("up"):
			
				menu("up", "inventory", "water    ", "done     ", "- game settings:")
			
			elif keyboard.is_pressed("enter"):
				time.sleep(0.5)
				
				if self.selOption == 1:
				
					print()
					print("inventory max is " + str(self.invMax))
					while True:
						setting = ""
						self.tries = 0
						while True:
							self.tries += 1
							if self.tries == 3:
								print("set inventory max:")
							else:
								pass
							setting = input()
							if setting != "":
								break
						try:
							self.invMax = int(setting)
							print()
							print("set inventory max to " + str(self.invMax))
							time.sleep(1)
							break
						except:
							print()
							print("you must enter a number")
							
				elif self.selOption == 2:
				
					print()
					print("water chance is " + str(self.settingWaterChance))
					while True:
						setting = ""
						self.tries = 0
						while True:
							self.tries += 1
							if self.tries == 3:
								print("set water chance:")
							else:
								pass
							setting = input()
							if setting != "":
								break
						try:
							self.settingWaterChance = int(setting)
							print()
							print("set water chance to " + str(self.settingWaterChance))
							time.sleep(1)
							break
						except:
							print()
							print("you must enter a number")
							
				elif self.selOption == 3:
					os.system("cls")
					print()
					print()
					print("Starting new game...")
					break
				if self.selOption != 3:
					self.settings()

	def setup(self):
		self.menuReturn = "false"
		self.player = Player()
		if self.load.loaded == "false":
			self.load.importX = 0
			self.load.importY = 0
			self.load.inventory = []
			self.settings()
		
		self.player.setup(self.load.importX, self.load.importY)
		print()
		if self.load.loaded == "false":
			self.newTerrain()
			self.knownTerrain()
		else:
			self.knownTerrain()
		print("Player is: ", self.player.x, self.player.y)
	def __init__(self):
		self.player = None
        # TODO: fill world with objects
	
	def newTerrain(self):
		temp_list = []
		self.ground = random.choice(GROUND_TYPES)
		self.attribute = random.choice(ATTRIBUTE_TYPES)
		self.level = random.choice(LEVEL_TYPES)
		water_chance = random.randint(1, 100)
		if water_chance <= self.settingWaterChance:
			self.water = random.choice(WATER_TYPES)
			temp_x = self.player.x
			temp_y = self.player.y
			temp_list.append(temp_x)
			temp_list.append(temp_y)
			temp_list.append(self.ground)
			temp_list.append(self.attribute)
			temp_list.append(self.level)
			temp_list.append(self.water)
			objects.append(temp_list)
		else:
			self.water = "none"
			temp_x = self.player.x
			temp_y = self.player.y
			temp_list.append(temp_x)
			temp_list.append(temp_y)
			temp_list.append(self.ground)
			temp_list.append(self.attribute)
			temp_list.append(self.level)
			temp_list.append(self.water)
			objects.append(temp_list)
			
	def knownTerrain(self):
		global v
		v = ""
		for object in objects:
			if self.player.x == object[0] and self.player.y == object[1]:
				if object[5] != "none":
					print("found:", object[2],object[3],object[4],object[5])
					v = "true"
				else:
					print("found:", object[2],object[3],object[4])
					v = "true"
				break
			
			else:
				v = "false"
		if v == "false":
			self.newTerrain()
			self.itemCheck()
			self.knownTerrain()
		elif v == "true":
			self.itemCheck()
	
	def itemAvailable(self, itemNeeded):
		self.available = ""
		if self.load.inventory == []:
			self.available = "false2"
		else:
			for object in self.load.inventory:
				if object == itemNeeded:
					self.available = "true"
					break
				else:
					self.available = "false2"
	
	def itemCheck(self):
		for object in objects:
			if self.player.x == object[0] and self.player.y == object[1]:
				if object[3] == "trees":
					self.treeOption = "true"
				else:
					self.treeOption = "false"
		
				if object[5] != "none":
					self.waterOption = "true"
				else:
					self.waterOption = "false"
				
				if object[2] == "rocky":
					self.itemAvailable("pickaxe")
					self.rockOption = self.available
				else:
					self.rockOption = "false"
				break
	
	def craft(self, product, material, material2, materialAmount):
		v = ""
		if materialAmount == 1:
			for object in self.load.inventory:
				if object == material:
					self.load.inventory.remove(material)
					self.load.inventory.append(product)
					print()
					print("crafted " + product)
					v = "true"
					break
				else:
					v = "false"
			if v == "false":
				print("you dont have the required materials")
		elif materialAmount == 2:
			for object in self.load.inventory:
				if object == material:
					self.load.inventory.remove(material)
					for object in self.load.inventory:
						if object == material2:
							self.load.inventory.remove(material)
							self.load.inventory.append(product)
							print()
							print("crafted " + product)
							v = "true"
							break
						else:
							v = "false"
							self.load.inventory.append(material)
				else:
					v = "false"
			if v == "false":
				print("you dont have the required materials")
				
	def on_draw(self):
        #Render the screen
	
        # teken speler
		print("Player is: ", self.player.x, self.player.y)
		print()
        # teken objecten
            # teken object
	#	for object in objects:
	#		if self.player.x = object[0] and self.player.y = object[1]:
	#			if object[5] != "none":
	#				print("found", object[0], object[1], object[2],object[3],object[4],object[5])
	#				break
	#			else:
	#				break
					
	def on_update(self):
		time.sleep(0.2)
		command = input("> ")
				
		
		if command == "forward":
			print()
			self.player.x += 1
			playerY = self.player.y
			playerX = self.player.x
			self.knownTerrain()
			print()
			print("Player is: ", self.player.x, self.player.y)
		elif command == "back":
			print()
			self.player.x-= 1
			playerY = self.player.y
			playerX = self.player.x
			self.knownTerrain()
			print()
			print("Player is: ", self.player.x, self.player.y)
		elif command == "left":
			print()
			self.player.y+= 1
			playerY = self.player.y
			playerX = self.player.x
			self.knownTerrain()
			print()
			print("Player is: ", self.player.x, self.player.y)
		elif command == "right":
			print()
			self.player.y-= 1
			playerY = self.player.y
			playerX = self.player.x
			self.knownTerrain()
			print()
			print("Player is: ", self.player.x, self.player.y)
		elif command == "help":
			print()
			print("forward")
			print("back")
			print("left")
			print("right")
			print("save")
			print("delete")
			print("collect")
			print("inventory")
			print("dump")
			print("craft")
			print("clear")
			print("help")
		elif command == "save":
			self.save()
		elif command == "delete":
			self.delete()
		elif command == "inventory":
			Print = ""
			for object in self.load.inventory:
				Print = Print + " " + object
			if self.load.inventory == []:
				print()
				print("empty")
			else:
				print()
				print("inventory:" + Print)
		elif command == "dump":
			Print = ""
			v = ""
			for object in self.load.inventory:
				Print = Print + " " + object
			if self.load.inventory == []:
				print()
				print("no items to dump")
			else:
				print()
				print("inventory: " + Print)
				print()
				print("choose item to dump")
				dump = input("dump: ")

				for object in self.load.inventory:
					if dump == object:
						self.load.inventory.remove(object)
						v = "true"
						print()
						print("dumped " + object)
						break
					else:
						v = "false"
				if v == "false":
					print()
					print("item is not in inventory")
		
		elif command == "collect":
			collect = input("collect: ")
			if collect == "wood":
				if self.treeOption == "true":
					x = 0
					for object in self.load.inventory:
						x += 1
					if x >= self.invMax:
						print()
						print("inventory is full")
					else:
						self.load.inventory.append("wood")
						print()
						print("collected wood")
				else:
					print()
					print("no wood to collect")
			elif collect == "water":
				if self.waterOption == "true":
					x = 0
					for object in self.load.inventory:
						x += 1
					if x >= self.invMax:
						print()
						print("inventory is full")
					else:
						self.load.inventory.append("water")
						print()
						print("collected water")
				else:
					print()
					print("no water to collect")
			elif collect == "stone":
				if self.rockOption == "true":
					x = 0
					for object in self.load.inventory:
						x += 1
					if x >= self.invMax:
						print()
						print("inventory is full")
					else:
						self.load.inventory.append("stone")
						print()
						print("collected stone")
				elif self.rockOption == "false2":
					print()
					print("you need a pickaxe to collect stone")
				else:
					print("no stone to collect")
			else:
				print()
				print("invalid collect option")	
		elif command == "clear":
			os.system("cls")
		elif command == "menu":
			print("head back to menu? any unsaved progress will be lost")
			while True:
				self.answer = input("(y/n)> ")
				if self.answer == "y":
					self.menuReturn = "true"
					break
				elif self.answer == "n":
					print()
					self.menuReturn = "false"
					break
				else:
					print("please enter y or n")
					
		elif command == "craft":
			craft = input("craft: ")
			if craft == "pickaxe":
				self.craft("pickaxe", "wood", "wood", 2)
			else:
				print("that is not a craftable item")		
		else:
			print("invalid input")

def main():
	time.sleep(1)
	os.system("cls")
	world.startup()
	world.setup()
	command = input()
	command = input()
	while True:
		#world.on_draw()
		world.itemCheck()
		world.on_update()
		if world.menuReturn == "true":
			break
	main()

world = World()
main()
