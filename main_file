"""
Text adventure
"""
import random

WATER_TYPES = ["creek","river","lake","stream","waterfall"]
GROUND_TYPES = ["grassy","rocky","sandy"]
ATTRIBUTE_TYPES = ["trees","cliffs"]
LEVEL_TYPES = ["mountains","lowlands","highlands"]
v = None

class Terrain_Object():
    """ Object class. """

    def __init__(self):
        self.x = None
        self.y = None
        self.water = None
        self.ground = None
        self.attribute = None
        self.level = None

    def setup(self, x, y):
        self.x = x
        self.y = y

        water_chance = random.randint(1, 100)
        self.water = random.choice(GROUND_TYPES)
        self.ground = random.choice(ATTRIBUTE_TYPES)
        self.attribute = random.choice(LEVEL_TYPES)
        if water_chance >= 40:
            self.water = random.choice(WATER_TYPES)

class Player():
    """ Player class. """

    def __init__(self):
        self.x = None
        self.y = None

    def setup(self, x, y):
        self.x = x
        self.y = y
    """ Main application class. """

class World():
	
	def __init__(self):
		self.player = None
		self.objects = []
        # TODO: fill world with objects
	
	def newTerrain(self):
		water_chance = random.randint(1, 100)
		self.ground = random.choice(GROUND_TYPES)
		self.attribute = random.choice(ATTRIBUTE_TYPES)
		self.level = random.choice(LEVEL_TYPES)
		if water_chance >= 40:
			self.water = random.choice(WATER_TYPES)
			temp_xy = (self.player.x, self.player.y)
			self.objects.append(temp_xy, self.ground, self.attribute, self.level, self.water)
		else:
			temp_xy = (self.player.x, self.player.y)
			self.objects.append(temp_xy, self.ground, self.attribute, self.level)
			
	def knownTerrain(self):
		for object in self.objects:
			if self.player.x == self.objects.x and self.player.y == self.objects.y:
				v = True
			else:
				v = False
		
	def setup(self):
		self.player = Player()
		self.player.setup(0, 0)
	
	def on_draw(self):
        #Render the screen.

        # teken speler
		print("")
		print("Player is: ", self.player.x, self.player.y)

        # teken objecten
		for object in self.objects:
            # teken object
			print("De ground is: ", self.objects)

	def on_update(self):
        # TODO: alle geldigde instructies in een lijst zetten
        # TODO: user input checken (geen cijfers etc.)
        # TODO: user input naar lower case?
		command = input("> ")
		if command == "forward":
			self.player.y += 1
			self.knownTerrain()
			if not v:
				self.newTerrain()
		elif command == "back":
			self.player.y -= 1
		elif command == "left":
			self.player.x += 1
		elif command == "right":
			self.player.x -= 1
		elif command == "help":
			print("forward")
			print("back")
			print("left")
			print("right")
			print("help")
		else:
			print("not a valid input")
        # TODO: other instructions


        # TODO: check if terrain is undiscovered
            # if so, generate
        # new_object = Object()
        #new_object.setup(self.player.x, self.player.y)
        #self.objects.append(new_object)

def main():
	world = World()
	world.setup()
	while True:
		world.on_update()
		world.on_draw()


if __name__ == "__main__":
	main()
